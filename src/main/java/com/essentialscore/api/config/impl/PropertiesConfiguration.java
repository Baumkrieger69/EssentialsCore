package com.essentialscore.api.config.impl;

import com.essentialscore.api.config.Configuration;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Properties implementation of the Configuration interface.
 */
public class PropertiesConfiguration implements Configuration {
    private static final Logger logger = Logger.getLogger(PropertiesConfiguration.class.getName());
    
    private final File file;
    private Properties properties;
    private FileConfiguration yamlConfig;
    
    /**
     * Creates a new properties configuration.
     *
     * @param file The configuration file
     */
    public PropertiesConfiguration(File file) {
        this.file = file;
        this.properties = new Properties();
        this.yamlConfig = new YamlConfiguration();
    }
    
    @Override
    public boolean load() {
        try {
            if (!file.exists()) {
                file.getParentFile().mkdirs();
                file.createNewFile();
                save();
                return true;
            }
            
            // Load properties
            try (FileInputStream fis = new FileInputStream(file)) {
                properties.load(fis);
            }
            
            // Convert to YAML for compatibility
            yamlConfig = new YamlConfiguration();
            convertPropertiesToYaml(properties, yamlConfig);
            
            return true;
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Failed to load properties configuration: " + file.getPath(), e);
            return false;
        }
    }
    
    @Override
    public boolean save() {
        try {
            // Ensure parent directory exists
            if (!file.getParentFile().exists()) {
                file.getParentFile().mkdirs();
            }
            
            // Convert YAML to properties
            convertYamlToProperties(yamlConfig, properties);
            
            // Save properties
            try (FileOutputStream fos = new FileOutputStream(file)) {
                properties.store(fos, "Generated by EssentialsCore");
                return true;
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Failed to save properties configuration: " + file.getPath(), e);
            return false;
        }
    }
    
    @Override
    public boolean reload() {
        return load();
    }
    
    @Override
    public void set(String path, Object value) {
        yamlConfig.set(path, value);
    }
    
    @Override
    public Object get(String path) {
        return yamlConfig.get(path);
    }
    
    @Override
    public String getString(String path) {
        return yamlConfig.getString(path);
    }
    
    @Override
    public String getString(String path, String defaultValue) {
        return yamlConfig.getString(path, defaultValue);
    }
    
    @Override
    public int getInt(String path) {
        return yamlConfig.getInt(path);
    }
    
    @Override
    public int getInt(String path, int defaultValue) {
        return yamlConfig.getInt(path, defaultValue);
    }
    
    @Override
    public boolean getBoolean(String path) {
        return yamlConfig.getBoolean(path);
    }
    
    @Override
    public boolean getBoolean(String path, boolean defaultValue) {
        return yamlConfig.getBoolean(path, defaultValue);
    }
    
    @Override
    public List<String> getStringList(String path) {
        return yamlConfig.getStringList(path);
    }
    
    @Override
    public FileConfiguration getFileConfiguration() {
        return yamlConfig;
    }
    
    @Override
    public File getFile() {
        return file;
    }
    
    @Override
    public boolean contains(String path) {
        return yamlConfig.contains(path);
    }
    
    @Override
    public Set<String> getKeys(boolean deep) {
        return yamlConfig.getKeys(deep);
    }
    
    @Override
    public ConfigurationSection getSection(String path) {
        return yamlConfig.getConfigurationSection(path);
    }
    
    @Override
    public ConfigurationSection createSection(String path) {
        return yamlConfig.createSection(path);
    }
    
    @Override
    public Map<String, Object> getValues(boolean deep) {
        return yamlConfig.getValues(deep);
    }
    
    /**
     * Converts properties to YAML configuration.
     *
     * @param props The properties
     * @param yaml The YAML configuration
     */
    private void convertPropertiesToYaml(Properties props, FileConfiguration yaml) {
        for (String key : props.stringPropertyNames()) {
            String value = props.getProperty(key);
            
            // Handle dot notation for nested properties
            if (key.contains(".")) {
                String[] parts = key.split("\\.");
                ConfigurationSection section = yaml;
                
                // Create nested sections
                for (int i = 0; i < parts.length - 1; i++) {
                    String part = parts[i];
                    
                    if (section.isConfigurationSection(part)) {
                        section = section.getConfigurationSection(part);
                    } else {
                        section = section.createSection(part);
                    }
                }
                
                // Set the value in the deepest section
                section.set(parts[parts.length - 1], convertValue(value));
            } else {
                // Simple key
                yaml.set(key, convertValue(value));
            }
        }
    }
    
    /**
     * Converts a string value to an appropriate type.
     *
     * @param value The string value
     * @return The converted value
     */
    private Object convertValue(String value) {
        // Try to convert to appropriate type
        if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
            return Boolean.parseBoolean(value);
        }
        
        try {
            // Try to parse as integer
            return Integer.parseInt(value);
        } catch (NumberFormatException e1) {
            try {
                // Try to parse as double
                return Double.parseDouble(value);
            } catch (NumberFormatException e2) {
                // Handle list format [item1,item2,item3]
                if (value.startsWith("[") && value.endsWith("]")) {
                    String listContent = value.substring(1, value.length() - 1);
                    String[] items = listContent.split(",");
                    List<String> list = new ArrayList<>();
                    
                    for (String item : items) {
                        list.add(item.trim());
                    }
                    
                    return list;
                }
                
                // Keep as string
                return value;
            }
        }
    }
    
    /**
     * Converts YAML configuration to properties.
     *
     * @param yaml The YAML configuration
     * @param props The properties
     */
    private void convertYamlToProperties(FileConfiguration yaml, Properties props) {
        props.clear();
        
        for (String key : yaml.getKeys(true)) {
            Object value = yaml.get(key);
            
            // Skip configuration sections
            if (value instanceof ConfigurationSection) {
                continue;
            }
            
            // Convert lists to special format
            if (value instanceof List) {
                @SuppressWarnings("unchecked")
                List<Object> list = (List<Object>) value;
                StringBuilder sb = new StringBuilder();
                sb.append("[");
                
                for (int i = 0; i < list.size(); i++) {
                    if (i > 0) {
                        sb.append(",");
                    }
                    sb.append(list.get(i).toString());
                }
                
                sb.append("]");
                props.setProperty(key, sb.toString());
            } else {
                // Regular value
                props.setProperty(key, value.toString());
            }
        }
    }
} 
